{"version":3,"sources":["AntlrValidator.ts"],"names":[],"mappings":"AAEA,IAAI,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACrC,IAAI,QAAQ,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAC3C,IAAI,SAAS,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAE7C;IAAA;QACY,kBAAa,GAAuB,IAAI,kBAAkB,EAAE,CAAC;IAwBzE,CAAC;IArBG,gCAAO,GAAP,UAAQ,KAAa;QACjB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;QAE3B,IAAI,KAAK,GAAG,IAAI,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC1C,IAAI,KAAK,GAAG,IAAI,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAEzC,KAAK,CAAC,oBAAoB,EAAE,CAAC;QAC7B,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAE3C,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QACjD,IAAI,MAAM,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAE7C,MAAM,CAAC,oBAAoB,EAAE,CAAC;QAC9B,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAE5C,IAAI,IAAI,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;QAE/B,OAAO,CAAC,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QAEhD,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;IACxC,CAAC;IACL,qBAAC;AAAD,CAzBA,AAyBC,IAAA","file":"AntlrValidator.js","sourcesContent":["declare var require: any;\r\n\r\nvar antlr4 = require('antlr4/index');\r\nvar SQELexer = require('lib/SQE/SQELexer');\r\nvar SQEParser = require('lib/SQE/SQEParser');\r\n\r\nclass AntlrValidator {\r\n    private errorListener: AntlrErrorListener = new AntlrErrorListener();\r\n\r\n\r\n    isValid(input: string): boolean {\r\n        this.errorListener.reset();\r\n\r\n        var chars = new antlr4.InputStream(input);\r\n        var lexer = new SQELexer.SQELexer(chars);\r\n\r\n        lexer.removeErrorListeners();\r\n        lexer.addErrorListener(this.errorListener);\r\n\r\n        var tokens = new antlr4.CommonTokenStream(lexer);\r\n        var parser = new SQEParser.SQEParser(tokens);\r\n\r\n        parser.removeErrorListeners();\r\n        parser.addErrorListener(this.errorListener);\r\n\r\n        var tree = parser.expression();\r\n\r\n        console.debug(\"Parsed: \" + tree.toStringTree());\r\n\r\n        return !this.errorListener.hasError;\r\n    }\r\n}"]}